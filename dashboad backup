<template>
    <Head title="Dashboard" />

    <AppLayout :breadcrumbs="breadcrumbs">
        <div class="flex h-full flex-1 flex-col gap-7 p-7">
            <!-- Modern glassy greeting section with light orange theme -->
            <div class="relative flex items-center overflow-hidden rounded-[1.25rem] backdrop-blur-2xl bg-neutral-100/80 dark:bg-neutral-900/80 border border-neutral-300/50 dark:border-neutral-700/30 shadow-sm transition-all duration-300 hover:shadow-md">
    <!-- Glassmorphism effects -->
    <div class="absolute inset-0 bg-gradient-to-br from-white/30 via-transparent to-transparent dark:from-neutral-800/20" />
    <div class="absolute top-0 right-0 w-1/3 h-1/2 bg-gradient-to-br from-primary-100/40 to-transparent dark:from-primary-500/10 rounded-bl-full opacity-50" />

    <div class="relative dark:bg-border/50 flex flex-col md:flex-row items-start md:items-center justify-between w-full p-6 md:p-5 lg:p-6 gap-4 z-10">
        <!-- Profile Section -->
        <div class="flex items-center gap-4 flex-1 min-w-0">
            <div class="relative h-14 w-14 rounded-full bg-gradient-to-br from-neutral-100/90 to-neutral-50/80 dark:from-neutral-800/70 dark:to-neutral-900/80 p-[2px] shadow-xs">
                <Avatar class="h-full w-full border-[1.5px] border-neutral-200/30 dark:border-white/10">
                    <AvatarImage :src="user?.profile_photo_url" alt="Profile photo" />
                    <AvatarFallback class="text-[15px] font-medium bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-200">
                        {{ (user?.name ?? 'User').substring(0, 2).toUpperCase() }}
                    </AvatarFallback>
                </Avatar>
            </div>
            
            <div class="flex-1 min-w-0">
                <h1 class="text-2xl md:text-[26px] font-semibold tracking-tight text-neutral-900 dark:text-neutral-100 truncate">
                    <span class="text-primary-600 dark:text-primary-400">Good {{ formatTimeOfDay() }},</span><br class="sm:hidden">
                    <span class="text-neutral-700 dark:text-neutral-200">{{ (user?.name?.split(' ')[0]) ?? 'User' }}</span>
                </h1>
                <p class="mt-1 text-[15px] text-neutral-600/90 dark:text-neutral-400/90 leading-snug">
                    {{ dailyGreeting }}
                </p>
            </div>
        </div>

        <!-- Date Section -->
        <div class="flex flex-col sm:flex-row md:flex-col lg:flex-row items-stretch gap-3 w-full sm:w-auto md:w-full lg:w-auto">
            <div class="flex items-center gap-2 px-4 py-2.5 rounded-xl backdrop-blur-sm bg-white/70 dark:bg-neutral-800/80 border border-neutral-200/60 dark:border-neutral-700/50 shadow-xs">
                <Calendar class="h-4 w-4 text-primary-500 dark:text-primary-400 flex-shrink-0" />
                <span class="text-[15px] font-medium text-neutral-700 dark:text-neutral-300 whitespace-nowrap">
                    {{ todayFormatted }}
                </span>
            </div>
            
            <Button variant="ghost" size="sm" class="h-auto px-4 py-2.5 rounded-xl backdrop-blur-sm bg-transparent hover:bg-neutral-100/60 dark:hover:bg-neutral-800/80 border border-neutral-200/60 dark:border-neutral-700/50 shadow-xs transition-colors">
                <Calendar class="h-4 w-4 text-primary-500 dark:text-primary-400 mr-2" />
                <span class="text-[15px] font-medium text-neutral-700 dark:text-neutral-300">Focus Calendar</span>
            </Button>
        </div>
    </div>
</div>


            <!-- Combined Stats and Streak Section -->
            <div class="grid gap-7 md:grid-cols-10 lg:grid-cols-12">
                <!-- Stats cards - expanded layout -->
                <div class="dark:text-white grid gap-6 md:col-span-10 lg:col-span-12 md:grid-cols-4 lg:grid-cols-4">
                    <Card class="dark:text-white group relative overflow-hidden border-border/50 shadow-sm hover:shadow-md transition-all hover:border-primary/20 dark:hover:border-primary/30 card-hover-effect min-h-[120px]">
                        <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <CardTitle class="text-sm font-medium">Total Study Time</CardTitle>
                                <Timer class="h-4 w-4 text-muted-foreground" />
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="flex items-center">
                                <div class="flex-1">
                                    <div class="text-2xl font-bold text-foreground">{{ formatMinutes(stats.totalStudyTime) }}</div>
                                    <p class="text-xs text-muted-foreground dark:text-white/80">
                                        <span class="text-green-500 dark:text-green-400">+{{ formatMinutes(stats.studyTimeChange) }}</span> from last week
                                    </p>
                                </div>
                                <div class="flex h-12 w-12 items-center justify-center rounded-full bg-primary/10 text-primary">
                                    <Timer class="h-6 w-6" />
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    <Card class="dark:text-white group relative overflow-hidden border-border/50 shadow-sm hover:shadow-md transition-all hover:border-primary/20 dark:hover:border-primary/30 card-hover-effect min-h-[120px]">
                        <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <CardTitle class="text-sm font-medium">Current Streak</CardTitle>
                                <Flame class="h-4 w-4 text-muted-foreground" />
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="flex items-center">
                                <div class="flex-1">
                                    <div class="text-2xl font-bold text-foreground">{{ stats.streak }} days</div>
                                    <p class="text-xs text-muted-foreground dark:text-white/80">{{ stats.streakPercentage }}% of your goal</p>
                                </div>
                                <div class="flex h-12 w-12 items-center justify-center rounded-full bg-amber-100 text-amber-700 dark:bg-amber-900/50 dark:text-amber-400">
                                    <Flame class="h-6 w-6" />
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    <Card class="dark:text-white group relative overflow-hidden border-border/50 shadow-sm hover:shadow-md transition-all hover:border-primary/20 dark:hover:border-primary/30 card-hover-effect min-h-[120px]">
                        <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <CardTitle class="text-sm font-medium">Avg Efficiency</CardTitle>
                                <Zap class="h-4 w-4 text-muted-foreground" />
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="flex items-center">
                                <div class="flex-1">
                                    <div class="text-2xl font-bold text-foreground">{{ stats.efficiency }}%</div>
                                    <p class="text-xs text-muted-foreground dark:text-white/80">
                                        <span class="{{ stats.efficiencyChange > 0 ? 'text-green-500 dark:text-green-400' : 'text-red-500 dark:text-red-400' }}">{{ stats.efficiencyChange > 0 ? '+' : '' }}{{ stats.efficiencyChange }}%</span> from last week
                                    </p>
                                </div>
                                <div class="flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-400">
                                    <Activity class="h-6 w-6" />
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    <Card class=" dark:text-white group relative overflow-hidden border-border/50 shadow-sm hover:shadow-md transition-all hover:border-primary/20 dark:hover:border-primary/30 card-hover-effect min-h-[120px]">
                        <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <CardTitle class="text-sm font-medium">Tasks Completed</CardTitle>
                                <CheckCircle class="h-4 w-4 text-muted-foreground" />
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="flex items-center">
                                <div class="flex-1">
                                    <div class="text-2xl font-bold text-foreground">{{ stats.tasksCompleted }}</div>
                                    <p class="text-xs text-muted-foreground dark:text-white/80">
                                        <span class="text-green-500 dark:text-green-400">+{{ stats.tasksCompletedChange }}</span> from last week
                                    </p>
                                </div>
                                <div class="flex h-12 w-12 items-center justify-center rounded-full bg-green-100 text-green-700 dark:bg-green-900/50 dark:text-green-400">
                                    <CheckCircle class="h-6 w-6" />
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                </div>
                
                <!-- Weekly Activities and Learning Insights Section -->
                <div class="grid gap-7 md:col-span-10 lg:col-span-12 md:grid-cols-1 lg:grid-cols-2">
                    <!-- Weekly Activity Card -->
                    <Card class="min-h-[280px] border border-border/50 shadow-sm hover:shadow-md transition-all dark:bg-card/95">
                        <CardHeader class="flex flex-row items-center justify-between pb-3 border-b border-border/40 bg-muted/30 dark:bg-muted/20">
                            <div class="space-y-1">
                                <h3 class="font-medium text-foreground text-lg">Weekly Activity</h3>
                                <p class="text-sm text-muted-foreground dark:text-white/80">Your focus sessions this week</p>
                            </div>
                        </CardHeader>
                        <CardContent class="pt-4">
                            <div class="space-y-4">
                                <!-- Activity bars -->
                                <div class=" w-full flex h-40 items-end gap-1.5">
                                    <div v-for="(day, index) in unwrappedFocusMetrics?.weeklyActivity || []" :key="index" 
                                        class="flex-1 rounded-t bg-primary/10 dark:bg-primary/20 transition-all hover:bg-primary/20 dark:hover:bg-primary/30"
                                        :class="isActiveDay(day.day) ? 'bg-primary/20 dark:bg-primary/30' : ''"
                                        :style="{ height: `${Math.max(day.minutes / 1.5, 8)}%` }">
                                        <div class="flex h-full flex-col justify-end">
                                            <div class="rounded-t bg-primary dark:bg-primary/80"
                                                :class="isActiveDay(day.day) ? 'bg-primary dark:bg-primary/80' : 'bg-primary/30 dark:bg-primary/50'" 
                                                :style="{ height: `${Math.max(day.minutes / 1.5, 8)}%` }" />
                                        </div>
                                    </div>
                                </div>

                                <div class="flex justify-between text-[10px] text-muted-foreground dark:text-white/80">
                                    <span v-for="day in unwrappedFocusMetrics?.weeklyActivity || []" :key="day.day">
                                        {{ day.day.substring(0, 3) }}
                                    </span>
                                </div>

                                <div class="pt-1 space-y-3">
                                    <div class="flex items-center justify-between text-sm">
                                        <span class="font-medium dark:text-white">Total study time</span>
                                        <span class="dark:text-white">{{ Math.round(totalStudyTime / 60 * 10) / 10 }}/{{ unwrappedFocusMetrics?.weeklyGoal || 0 }}h</span>
                                    </div>
                                    
                                    <div class="w-full bg-muted/70 dark:bg-muted/40 rounded-full h-2.5">
                                        <div 
                                            class="bg-gradient-to-r from-primary/90 to-primary h-2.5 rounded-full"
                                            :style="{ width: `${Math.min(totalStudyTime / 60 / (unwrappedFocusMetrics?.weeklyGoal || 1) * 100, 100)}%` }"
                                        ></div>
                                    </div>
                                    
                                    <div class="flex justify-between items-center mt-4 text-sm">
                                        <div class="flex items-center">
                                            <div class="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center mr-3">
                                                <TrendingUp class="h-4 w-4 text-primary" />
                                            </div>
                                            <span class="dark:text-white">Weekly progress</span>
                                        </div>
                                        <Badge variant="outline" class="bg-primary/10 border-primary/30 px-2">
                                            <ArrowUp class="h-3 w-3 mr-1 text-green-500" />
                                            <span class="dark:text-white">{{ formatMinutes(stats.studyTimeChange) }}</span>
                                        </Badge>
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                    
                    <!-- Learning Insights Card -->
                    <Card class="border-border card-hover-effect min-h-[320px] border border-border/50 shadow-sm hover:shadow-md transition-all dark:bg-card/95">
                        <CardHeader class="pb-4 border-b border-border/40 bg-muted/30 dark:bg-muted/20">
                            <div class="flex items-center justify-between">
                                <div class="space-y-1">
                                    <h3 class="font-semibold text-foreground text-lg">Learning Insights</h3>
                                    <p class="text-sm text-muted-foreground dark:text-white/80">Your learning patterns and progress</p>
                                </div>
                            </div>
                        </CardHeader>
                        <CardContent class="pt-6">
                            <div class="space-y-5">
                                <div class="flex justify-between items-center p-3 rounded-md bg-accent/40 dark:bg-accent/30 transition-colors hover:bg-accent/50">
                                    <div class="flex items-center">
                                        <div class="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-primary/10 text-primary mr-4">
                                            <Brain class="h-5 w-5" />
                                        </div>
                                        <div>
                                            <p class="font-medium">Best Focus Time</p>
                                            <p class="text-sm text-muted-foreground dark:text-white/80">Morning (9am-11am)</p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <div class="h-2 w-2 rounded-full bg-green-500"></div>
                                        <span class="text-sm text-muted-foreground dark:text-white/80">85% efficient</span>
                                    </div>
                                </div>
                                
                                <div class="flex justify-between items-center p-3 rounded-md bg-accent/40 dark:bg-accent/30 transition-colors hover:bg-accent/50">
                                    <div class="flex items-center">
                                        <div class="flex h-10 w-10 items-center justify-center rounded-full bg-amber-100 text-amber-700 dark:bg-amber-900/50 dark:text-amber-400 mr-4">
                                            <Flame class="h-5 w-5" />
                                        </div>
                                        <div>
                                            <p class="font-medium">Most Productive Day</p>
                                            <p class="text-sm text-muted-foreground dark:text-white/80">Tuesday</p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <div class="h-2 w-2 rounded-full bg-amber-500"></div>
                                        <span class="text-sm text-muted-foreground dark:text-white/80">12 tasks completed</span>
                                    </div>
                                </div>
                                
                                <div class="flex justify-between items-center p-3 rounded-md bg-accent/40 dark:bg-accent/30 transition-colors hover:bg-accent/50">
                                    <div class="flex items-center">
                                        <div class="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-400 mr-4">
                                            <BookOpen class="h-5 w-5" />
                                        </div>
                                        <div>
                                            <p class="font-medium">Learning Preference</p>
                                            <p class="text-sm text-muted-foreground dark:text-white/80">Visual content</p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <div class="h-2 w-2 rounded-full bg-blue-500"></div>
                                        <span class="text-sm text-muted-foreground dark:text-white/80">70% comprehension</span>
                                    </div>
                                </div>
                                
                                <!-- Daily Learning Tip -->
                                <!-- <div class="mt-3 p-4 rounded-lg bg-gradient-to-br from-primary/15 via-accent/40 to-accent/30 dark:from-primary/30 dark:via-accent/40 dark:to-accent/30 border border-primary/30 shadow-sm">
                                    <div class="flex">
                                        <div class="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-primary/20 text-primary mr-4">
                                            <Zap class="h-5 w-5" />
                                        </div>
                                        <div>
                                            <p class="font-medium text-base">Daily Learning Tip</p>
                                            <p class="text-sm text-muted-foreground mt-2">
                                                Taking short 5-minute breaks every 25 minutes of focused study can improve retention by up to 30%.
                                            </p>
                                        </div>
                                    </div>
                                </div> -->
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </div>
            
            <!-- Second row with 3-column layout -->
            <div class="grid gap-7 lg:grid-cols-7">
                <!-- Left column with achievements and recent sessions -->
                <div class="space-y-7 lg:col-span-3">
                    <!-- Achievements/badges section -->
                    <Card class="dark:text-white border-border/50 shadow-sm">
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <h3 class="font-semibold text-foreground">Your Achievements</h3>
                                <Badge variant="outline" class="bg-primary/10 border-primary/30">
                                    <Award class="mr-1 h-3.5 w-3.5 text-primary" />
                                    <span class="dark:text-white">{{ (badges || []).filter(b => b.achieved).length }}/{{ (badges || []).length }}</span>
                                </Badge>
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="grid grid-cols-2 gap-3 sm:grid-cols-3">
                                <div v-for="badge in badges || []" :key="badge.id" 
                                    class="group relative flex flex-col items-center justify-center rounded-lg p-3 transition-all hover:bg-accent/50 dark:hover:bg-accent/20"
                                    :class="badge.achieved ? 'bg-primary/5 dark:bg-primary/10' : 'bg-muted/20 dark:bg-muted/10'"
                                >
                                    <div class="relative mb-2 flex h-14 w-14 items-center justify-center rounded-full"
                                        :class="badge.achieved 
                                            ? 'bg-primary/10 text-primary dark:bg-primary/20' 
                                            : 'bg-muted/30 text-muted-foreground dark:bg-muted/20'"
                                    >
                                        <span v-if="badge.achieved" class="absolute -right-1 -top-1 flex h-5 w-5 items-center justify-center rounded-full bg-green-500 text-white">
                                            <CheckCircle class="h-3 w-3" />
                                        </span>
                                        <component :is="badge.icon" class="h-7 w-7" />
                                        
                                        <!-- Animated border on hover for achieved badges -->
                                        <div v-if="badge.achieved" class="absolute inset-0 rounded-full border border-primary/30 opacity-0 group-hover:opacity-100 transition-opacity animate-pulse"></div>
                                    </div>
                                    <span class="text-center font-medium text-sm text-foreground">{{ badge.name }}</span>
                                    <span class="text-center text-xs text-muted-foreground">{{ badge.achieved ? badge.description : 'Locked' }}</span>
                                    
                                    <!-- Level indicator for achieved badges -->
                                    <div v-if="badge.achieved && badge.level" class="mt-1.5 flex items-center">
                                        <div class="flex">
                                            <div v-for="n in 3" :key="n" class="h-1.5 w-8 rounded-full mx-0.5"
                                                :class="n <= badge.level 
                                                    ? 'bg-primary dark:bg-primary/80' 
                                                    : 'bg-primary/20 dark:bg-primary/20'"
                                            ></div>
                                        </div>
                                        <span class="ml-1.5 text-xs font-medium text-primary dark:text-primary-foreground">Lvl {{ badge.level }}</span>
                                    </div>
                                    
                                    <!-- Progress indicator for locked badges -->
                                    <div v-if="!badge.achieved && badge.progress" class="mt-1.5 w-full px-2">
                                        <div class="relative h-1.5 w-full rounded-full bg-muted/30">
                                            <div class="absolute left-0 top-0 h-1.5 rounded-full bg-primary/40"
                                                :style="`width: ${badge.progress}%`">
                                            </div>
                                        </div>
                                        <div class="mt-0.5 flex items-center justify-between text-[10px] text-muted-foreground">
                                            <span>Progress</span>
                                            <span>{{ badge.progress }}%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                    
                    <!-- Quick Actions Section -->
                    <Card class="dark:text-white border-border/50 card-hover-effect shadow-sm">
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <h3 class="font-semibold text-foreground">Quick Actions</h3>
                            </div>
                        </CardHeader>
                        <CardContent>
                            <div class="grid grid-cols-2 gap-2">
                                <Button variant="outline" class="justify-start h-10 bg-accent/10 dark:bg-accent/5 border-border">
                                    <div class="flex items-center">
                                        <div class="flex h-8 w-8 items-center justify-center rounded-full bg-primary/10 text-primary mr-2">
                                            <Timer class="h-4 w-4" />
                                        </div>
                                        <span>Start Focus Session</span>
                                    </div>
                                </Button>
                                <Button variant="outline" class="justify-start h-10 bg-accent/10 dark:bg-accent/5 border-border">
                                    <div class="flex items-center">
                                        <div class="flex h-8 w-8 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-400 mr-2">
                                            <BookOpen class="h-4 w-4" />
                                        </div>
                                        <span>Continue Learning</span>
                                    </div>
                                </Button>
                                <Button variant="outline" class="justify-start h-10 bg-accent/10 dark:bg-accent/5 border-border">
                                    <div class="flex items-center">
                                        <div class="flex h-8 w-8 items-center justify-center rounded-full bg-amber-100 text-amber-700 dark:bg-amber-900/50 dark:text-amber-400 mr-2">
                                            <CheckCircle class="h-4 w-4" />
                                        </div>
                                        <span>View Tasks</span>
                                    </div>
                                </Button>
                                <Button variant="outline" class="justify-start h-10 bg-accent/10 dark:bg-accent/5 border-border">
                                    <div class="flex items-center">
                                        <div class="flex h-8 w-8 items-center justify-center rounded-full bg-green-100 text-green-700 dark:bg-green-900/50 dark:text-green-400 mr-2">
                                            <Award class="h-4 w-4" />
                                        </div>
                                        <span>Set Goals</span>
                                    </div>
                                </Button>
                            </div>
                        </CardContent>
                    </Card>

                    <!-- Recent focus sessions -->
                    <Card class="border-border/50 shadow-sm">
                        <CardHeader class="pb-2">
                            <div class="flex items-center justify-between">
                                <h3 class="font-semibold text-foreground">Recent Focus Sessions</h3>
                                <Button variant="ghost" size="sm" class="dark:text-white h-8 px-2">
                                    View all
                                </Button>
                            </div>
                        </CardHeader>
                        <CardContent class="p-0">
                            <div v-if="(recentFocusSessions || []).length > 0">
                                <div v-for="(session, index) in recentFocusSessions || []" :key="index" 
                                    class="border-b border-border last:border-0 hover:bg-accent/40 dark:hover:bg-accent/20 transition-colors">
                                    <div class="flex items-start justify-between p-4">
                                        <div class="flex items-start space-x-4">
                                            <div class="dark:text-white flex h-10 w-10 items-center justify-center rounded-full bg-primary/10 text-primary dark:bg-primary/20">
                                                <Timer class="dark:text-white h-4 w-4" />
                                            </div>
                                            <div>
                                                <p class="font-medium text-foreground">{{ session.title }}</p>
                                                <div class="flex mt-1 text-xs dark:text-white">
                                                    <span class="flex items-center">
                                                        <Timer class="dark:text-white mr-1 h-3 w-3" />
                                                        {{ session.pomodoroCount }} pomodoros
                                                    </span>
                                                    <span class="mx-2">•</span>
                                                    <span class="flex items-center">
                                                        <CheckCircle class="dark:text-white mr-1 h-3 w-3" />
                                                        {{ session.tasksCompleted }} tasks
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <div class="flex flex-col mt-2 w-full">
                                                <div class="flex justify-between items-center text-xs dark:text-white">
                                                    <span>Duration</span>
                                                    <span>{{ formatSeconds(session.duration) }}</span>
                                                </div>
                                            </div>
                                            <Badge variant="outline" class="text-xs border-border dark:text-white">
                                                {{ session.efficiency }}% efficient
                                            </Badge>
                                        </div>
                                    </div>
                                    <div v-if="session.notes" class="px-4 pb-3 -mt-1">
                                        <p class="text-xs dark:text-white italic">
                                            "{{ session.notes }}"
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div v-else class="flex flex-col items-center justify-center py-8">
                                <Timer class="h-10 w-10 text-muted-foreground opacity-40" />
                                <p class="mt-2 text-sm text-muted-foreground">No recent focus sessions</p>
                                <Button variant="outline" size="sm" class="mt-4 border-border">
                                    Start a session
                                </Button>
                            </div>
                        </CardContent>
                    </Card>
                </div>
                
                <!-- Right column with courses -->
                <div class="space-y-7 lg:col-span-4">
                    <!-- Courses section -->
                    <Card class="dark:text-white border-border/50 shadow-sm overflow-hidden">
                        <CardHeader class="pb-3 border-b border-border/30 bg-muted/20">
                            <div class="flex items-center justify-between">
                                <h3 class="font-semibold text-foreground">Your Courses</h3>
                                <Button variant="outline" size="sm" class="h-8 border-border/50" @click="router?.visit ? router.visit('/courses') : null">
                                    <Plus class="mr-1 h-3.5 w-3.5" />
                                    Browse Courses
                                </Button>
                            </div>
                        </CardHeader>
                        <CardContent class="p-0">
                            <Tabs defaultValue="inProgress" class="w-full">
                                <div class="border-b border-border/30 px-4">
                                    <TabsList class="h-10 gap-4 bg-transparent p-0">
                                        <TabsTrigger value="inProgress" variant="underline" class="h-10 rounded-none">
                                            In Progress
                                        </TabsTrigger>
                                        <TabsTrigger value="suggested" variant="underline" class="h-10 rounded-none">
                                            Suggested
                                        </TabsTrigger>
                                    </TabsList>
                                </div>
                                <TabsContent value="inProgress" class="m-0 focus-visible:outline-none focus-visible:ring-0">
                                    <div class="grid gap-0 divide-y divide-border/30">
                                        <div v-for="course in coursesInProgress || []" :key="course.id"
                                            class="hover:bg-accent/30 dark:hover:bg-accent/10 transition-colors">
                                            <div class="p-4">
                                                <div class="flex items-center gap-4">
                                                    <!-- Course icon -->
                                                    <div class="relative h-14 w-14 overflow-hidden rounded-full flex-shrink-0 shadow-sm border border-border/30">
                                                        <div class="h-full w-full" :style="`background-color: ${getCourseColor(course.id)}`">
                                                            <div class="absolute inset-0 flex items-center justify-center text-white font-semibold">
                                                                {{ getCourseInitials(course.title) }}
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Course details -->
                                                    <div class="flex-1 min-w-0">
                                                        <!-- Title and badges -->
                                                        <div class="flex items-center gap-2 mb-1">
                                                            <h3 class="font-medium text-base text-foreground truncate">{{ course.title }}</h3>
                                                            <Badge v-if="course.isNew" variant="secondary" class="h-5 text-xs px-1.5 py-0 bg-blue-100 text-blue-700 border-blue-200 dark:bg-blue-900/40 dark:text-blue-400 dark:border-blue-800/50">
                                                                New
                                                            </Badge>
                                                        </div>
                                                        
                                                        <!-- Progress -->
                                                        <div class="w-full mt-2 mb-3">
                                                            <div class="flex justify-between text-xs mb-1.5">
                                                                <div class="text-muted-foreground">Progress: <span class="text-foreground font-medium">{{ course.progress }}%</span></div>
                                                                <div class="text-muted-foreground">{{ course.timeLeft }} remaining</div>
                                                            </div>
                                                            <div class="relative h-1.5 w-full rounded-full bg-muted/50 dark:bg-muted/30">
                                                                <div 
                                                                    class="absolute left-0 top-0 h-1.5 rounded-full bg-gradient-to-r from-primary/90 to-primary"
                                                                    :style="`width: ${course.progress || 0}%`"
                                                                ></div>
                                                            </div>
                                                        </div>
                                                        
                                                        <!-- Action buttons -->
                                                        <div class="flex items-center justify-between">
                                                            <div class="text-xs text-muted-foreground flex items-center">
                                                                <BookOpen class="h-3.5 w-3.5 mr-1.5 text-primary/70" />
                                                                <span class="truncate max-w-[200px]">{{ course.nextLesson }}</span>
                                                            </div>
                                                            <Button 
                                                                variant="ghost" 
                                                                size="sm" 
                                                                class="h-7 text-xs gap-1 hover:bg-primary/10 hover:text-primary"
                                                                @click="router?.visit ? router.visit(`/courses/${course.id}`) : null"
                                                            >
                                                                <span>Continue</span>
                                                                <ArrowRight class="h-3 w-3" />
                                                            </Button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Empty state -->
                                    <div v-if="(coursesInProgress || []).length === 0" class="flex flex-col items-center justify-center py-12">
                                        <div class="flex items-center justify-center w-14 h-14 rounded-full bg-primary/10 dark:bg-primary/20 mb-3">
                                            <BookOpen class="h-6 w-6 text-primary dark:text-primary-foreground opacity-80" />
                                        </div>
                                        <h3 class="text-lg font-medium text-foreground">No courses in progress</h3>
                                        <p class="mt-1 text-sm text-muted-foreground max-w-sm text-center">Start learning something new today.</p>
                                        <Button variant="default" size="sm" class="mt-4" @click="router?.visit ? router.visit('/courses') : null">
                                            Browse Courses
                                        </Button>
                                    </div>
                                </TabsContent>
                                
                                <TabsContent value="suggested" class="m-0 focus-visible:outline-none focus-visible:ring-0">
                                    <div class="grid gap-4 p-4 sm:grid-cols-2">
                                        <div v-for="i in 2" :key="i" class="group rounded-lg border border-border/30 bg-card overflow-hidden hover:shadow-sm transition-all dark:hover:bg-accent/10">
                                            <div class="relative aspect-video w-full">
                                                <div class="w-full h-full" :style="`background-color: ${i === 1 ? '#3498db' : '#9b59b6'}`">
                                                    <div class="absolute inset-0 flex items-center justify-center text-white font-bold text-xl">
                                                        {{ i === 1 ? 'PM' : 'AF' }}
                                                    </div>
                                                </div>
                                                <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end p-4">
                                                    <h3 class="font-medium text-white text-base">{{ i === 1 ? 'Python Mastery' : 'AI Fundamentals' }}</h3>
                                                </div>
                                            </div>
                                            <div class="p-3 flex justify-between items-center">
                                                <div class="text-xs text-muted-foreground dark:text-white/80">
                                                    {{ i === 1 ? '24 lessons • 6h' : '18 lessons • 4.5h' }}
                                                </div>
                                                <Button variant="ghost" size="sm" class="h-7 text-xs gap-1 text-primary">
                                                    <span>Start</span>
                                                    <ArrowRight class="h-3 w-3" />
                                                </Button>
                                            </div>
                                        </div>
                                    </div>
                                </TabsContent>
                            </Tabs>
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    </AppLayout>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';
import { Head, router } from '@inertiajs/vue3';
import AppLayout from "@/layouts/AppLayout.vue";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { TabsContent, Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  BookOpen,
  Calendar,
  CheckCircle,
  Flame,
  Plus,
  Timer,
  Zap,
  Activity,
  Award,
  Brain,
} from "lucide-vue-next";

// Sample breadcrumbs
const breadcrumbs = [
  { title: "Home", href: "/" },
  { title: "Dashboard", href: "/dashboard", current: true },
];

const user = ref({ name: 'Louis' }); // This would normally come from auth

// Sample stats data
const stats = ref({
  totalStudyTime: 1245, // in minutes
  studyTimeChange: 120, // in minutes
  streak: 7,
  streakPercentage: 70,
  efficiency: 85,
  efficiencyChange: 3,
  tasksCompleted: 23,
  tasksCompletedChange: 5
});

// Sample focus metrics
const focusMetrics = ref({
  dailyStreak: 7,
  longestStreak: 14,
  weeklyFocusSessions: 12,
  todayFocusTime: 45,
  weeklyGoal: 10,
  weeklyActivity: [
    { day: 'M', minutes: 45 },
    { day: 'T', minutes: 60 },
    { day: 'W', minutes: 30 },
    { day: 'T', minutes: 90 },
    { day: 'F', minutes: 45 },
    { day: 'S', minutes: 15 },
    { day: 'S', minutes: 0 },
  ],
  badges: [
    { name: 'Focus Master', icon: 'Award', level: 2, achieved: true },
    { name: 'Early Bird', icon: 'Sunrise', level: 1, achieved: true },
    { name: 'Night Owl', icon: 'Moon', level: 0, achieved: false },
    { name: 'Weekend Warrior', icon: 'Trophy', level: 3, achieved: true },
  ]
});

// For safety in template
const unwrappedFocusMetrics = computed(() => focusMetrics.value || {});

// Weekly goal calculation
const totalStudyTime = computed(() => {
  if (!unwrappedFocusMetrics.value?.weeklyActivity) return 0;
  return unwrappedFocusMetrics.value.weeklyActivity.reduce((total, day) => total + day.minutes, 0);
});

// Activity helper
const isActiveDay = (minutes: number): boolean => {
  return minutes > 0;
};

// Recent focus sessions
const recentFocusSessions = ref([
  {
    id: 1,
    title: 'Morning Focus',
    date: new Date(Date.now() - 86400000), // yesterday
    duration: 3600, // 1 hour in seconds
    pomodoroCount: 4,
    tasksCompleted: 3,
    efficiency: 85,
    notes: 'Made good progress on the React project'
  },
  {
    id: 2,
    title: 'Evening Study',
    date: new Date(Date.now() - 259200000), // 2 days ago
    duration: 5400, // 1.5 hours
    pomodoroCount: 6,
    tasksCompleted: 5,
    efficiency: 92,
    notes: 'Completed the API integration chapter'
  }
]);

// Badges
const badges = ref([
  {
    id: 1,
    name: "Focus Master",
    description: "Complete 10 focus sessions",
    icon: Award,
    achieved: true,
    level: 2,
    progress: 100
  },
  {
    id: 2,
    name: "Task Champion",
    description: "Complete 50 tasks",
    icon: CheckCircle,
    achieved: true,
    level: 1,
    progress: 100
  },
  {
    id: 3,
    name: "Early Bird",
    description: "5 focus sessions before 9am",
    icon: Zap,
    achieved: true,
    level: 3,
    progress: 100
  },
  {
    id: 4,
    name: "Night Owl",
    description: "Complete 5 sessions after 9pm",
    icon: Brain,
    achieved: false,
    progress: 60
  },
  {
    id: 5,
    name: "Productivity Guru",
    description: "Maintain 90%+ efficiency for a week",
    icon: Activity,
    achieved: false,
    progress: 75
  },
  {
    id: 6,
    name: "Knowledge Seeker",
    description: "Complete 3 courses",
    icon: BookOpen,
    achieved: false,
    progress: 33
  }
]);

// Course data
const coursesInProgress = ref([
  {
    id: 1,
    title: 'Advanced React Patterns',
    thumbnail: '/assets/images/course-react.jpg',
    progress: 75,
    isNew: false,
    isPopular: true,
    nextLesson: 'Context API Deep Dive',
    lastAccessed: new Date(Date.now() - 86400000),
    timeLeft: '2.5 hours',
    daysLeft: 5
  },
  {
    id: 2,
    title: 'TypeScript Fundamentals',
    thumbnail: '/assets/images/course-typescript.jpg',
    progress: 45,
    isNew: true,
    isPopular: false,
    nextLesson: 'Advanced Types',
    lastAccessed: new Date(Date.now() - 259200000),
    timeLeft: '4 hours',
    daysLeft: 0
  },
  {
    id: 3,
    title: 'System Design Master Class',
    thumbnail: '/assets/images/course-system-design.jpg',
    progress: 22,
    isNew: true,
    isPopular: true,
    nextLesson: 'Distributed Systems Architecture',
    lastAccessed: new Date(Date.now() - 518400000),
    timeLeft: '6.5 hours',
    daysLeft: 14
  },
  {
    id: 4,
    title: 'Modern JavaScript Essentials',
    thumbnail: '/assets/images/course-js.jpg',
    progress: 88,
    isNew: false,
    isPopular: true,
    nextLesson: 'Async/Await Deep Dive',
    lastAccessed: new Date(Date.now() - 172800000),
    timeLeft: '1.2 hours',
    daysLeft: 3
  }
]);

// Utility functions
const formatMinutes = (minutes: number): string => {
  if (!minutes || minutes < 0) return "0 min";
  if (minutes < 60) return `${minutes} min`;
  
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  if (remainingMinutes === 0) return `${hours} ${hours === 1 ? "hour" : "hours"}`;
  return `${hours}h ${remainingMinutes}m`;
};

const formatTimeOfDay = () => {
  const now = new Date();
  const hour = now.getHours();
  
  if (hour < 12) return "Morning";
  if (hour < 17) return "Afternoon";
  return "Evening";
};

const formatSeconds = (seconds: number) => {
  if (!seconds) return "0 sec";
  if (seconds < 60) return `${seconds} sec`;
  return formatMinutes(Math.floor(seconds / 60));
};

const todayFormatted = computed(() => {
  const now = new Date();
  return now.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
});

const dailyGreeting = computed(() => {
  const now = new Date();
  const hour = now.getHours();
  const quotes = [
    "Believe you can and you're halfway there.",
    "It does not matter how slowly you go as long as you do not stop.",
    "Success is not final, failure is not fatal: It is the courage to continue that counts.",
    "Don't watch the clock; do what it does. Keep going.",
    "You miss 100% of the shots you don't take.",
  ];
  const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
  
  if (hour < 12) return `Good morning! ${randomQuote}`;
  if (hour < 17) return `Good afternoon! ${randomQuote}`;
  return `Good evening! ${randomQuote}`;
});

const getCourseColor = (id: number) => {
  const colors = ['#3498db', '#f1c40f', '#2ecc71', '#e74c3c', '#9b59b6'];
  return colors[id % colors.length];
};

const getCourseInitials = (title: string) => {
  const words = title.split(' ');
  return words.map(word => word[0].toUpperCase()).join('');
};
</script>

<style>
.animate-gradient-circle {
  animation: gradient-rotate 8s linear infinite;
}

.bg-grid-white {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(255 255 255 / 0.05)'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
}

@keyframes gradient-rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.card-hover-effect {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card-hover-effect:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 20px -10px rgba(0, 0, 0, 0.1);
}

.dark .card-hover-effect:hover {
  box-shadow: 0 12px 20px -10px rgba(0, 0, 0, 0.3);
}


.bg-grid-white {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(255 255 255 / 0.03)'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
}

@keyframes fade-in {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.animate-card-in {
  animation: fade-in 0.6s cubic-bezier(0.16, 1, 0.3, 1);
}
</style>
